/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.36.1
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Base class for all objects that are not extensible with additional keys.  This effectively includes all objects except for the Properties classes that are assigned to geometry objects.
    /// </summary>
    [DataContract]
    public partial class VentilationOpening : HoneybeeObject, IEquatable<VentilationOpening>, IValidatableObject
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="VentilationOpening" /> class.
        /// </summary>
        /// <param name="fractionAreaOperable">A number for the fraction of the window area that is operable. (default to 0.5D).</param>
        /// <param name="fractionHeightOperable">A number for the fraction of the distance from the bottom of the window to the top that is operable. (default to 1.0D).</param>
        /// <param name="dischargeCoefficient">A number that will be multipled by the area of the window in the stack (buoyancy-driven) part of the equation to account for additional friction from window geometry, insect screens, etc. Typical values include 0.45, for unobstructed windows WITH insect screens and 0.65 for unobstructed windows WITHOUT insect screens. This value should be lowered if windows are of an awning or casement type and are not allowed to fully open. (default to 0.45D).</param>
        /// <param name="windCrossVent">Boolean to indicate if there is an opening of roughly equal area on the opposite side of the Room such that wind-driven cross ventilation will be induced. If False, the assumption is that the operable area is primarily on one side of the Room and there is no wind-driven ventilation. (default to false).</param>
        public VentilationOpening
        (
             // Required parameters
            double fractionAreaOperable = 0.5D, double fractionHeightOperable = 1.0D, double dischargeCoefficient = 0.45D, bool windCrossVent = false// Optional parameters
        )// BaseClass
        {
            // use default value if no "fractionAreaOperable" provided
            if (fractionAreaOperable == null)
            {
                this.FractionAreaOperable = 0.5D;
            }
            else
            {
                this.FractionAreaOperable = fractionAreaOperable;
            }
            // use default value if no "fractionHeightOperable" provided
            if (fractionHeightOperable == null)
            {
                this.FractionHeightOperable = 1.0D;
            }
            else
            {
                this.FractionHeightOperable = fractionHeightOperable;
            }
            // use default value if no "dischargeCoefficient" provided
            if (dischargeCoefficient == null)
            {
                this.DischargeCoefficient = 0.45D;
            }
            else
            {
                this.DischargeCoefficient = dischargeCoefficient;
            }
            // use default value if no "windCrossVent" provided
            if (windCrossVent == null)
            {
                this.WindCrossVent = false;
            }
            else
            {
                this.WindCrossVent = windCrossVent;
            }

            // Set non-required readonly properties with defaultValue
            this.Type = "VentilationOpening";
        }
        
        /// <summary>
        /// A number for the fraction of the window area that is operable.
        /// </summary>
        /// <value>A number for the fraction of the window area that is operable.</value>
        [DataMember(Name="fraction_area_operable", EmitDefaultValue=false)]
        [JsonProperty("fraction_area_operable")]
        public double FractionAreaOperable { get; set; }  = 0.5D;
        /// <summary>
        /// A number for the fraction of the distance from the bottom of the window to the top that is operable.
        /// </summary>
        /// <value>A number for the fraction of the distance from the bottom of the window to the top that is operable.</value>
        [DataMember(Name="fraction_height_operable", EmitDefaultValue=false)]
        [JsonProperty("fraction_height_operable")]
        public double FractionHeightOperable { get; set; }  = 1.0D;
        /// <summary>
        /// A number that will be multipled by the area of the window in the stack (buoyancy-driven) part of the equation to account for additional friction from window geometry, insect screens, etc. Typical values include 0.45, for unobstructed windows WITH insect screens and 0.65 for unobstructed windows WITHOUT insect screens. This value should be lowered if windows are of an awning or casement type and are not allowed to fully open.
        /// </summary>
        /// <value>A number that will be multipled by the area of the window in the stack (buoyancy-driven) part of the equation to account for additional friction from window geometry, insect screens, etc. Typical values include 0.45, for unobstructed windows WITH insect screens and 0.65 for unobstructed windows WITHOUT insect screens. This value should be lowered if windows are of an awning or casement type and are not allowed to fully open.</value>
        [DataMember(Name="discharge_coefficient", EmitDefaultValue=false)]
        [JsonProperty("discharge_coefficient")]
        public double DischargeCoefficient { get; set; }  = 0.45D;
        /// <summary>
        /// Boolean to indicate if there is an opening of roughly equal area on the opposite side of the Room such that wind-driven cross ventilation will be induced. If False, the assumption is that the operable area is primarily on one side of the Room and there is no wind-driven ventilation.
        /// </summary>
        /// <value>Boolean to indicate if there is an opening of roughly equal area on the opposite side of the Room such that wind-driven cross ventilation will be induced. If False, the assumption is that the operable area is primarily on one side of the Room and there is no wind-driven ventilation.</value>
        [DataMember(Name="wind_cross_vent", EmitDefaultValue=false)]
        [JsonProperty("wind_cross_vent")]
        public bool WindCrossVent { get; set; }  = false;
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            if (this is IIDdBase iDd)
                return $"VentilationOpening {iDd.Identifier}";
       
            return "VentilationOpening";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("VentilationOpening:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FractionAreaOperable: ").Append(FractionAreaOperable).Append("\n");
            sb.Append("  FractionHeightOperable: ").Append(FractionHeightOperable).Append("\n");
            sb.Append("  DischargeCoefficient: ").Append(DischargeCoefficient).Append("\n");
            sb.Append("  WindCrossVent: ").Append(WindCrossVent).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>VentilationOpening object</returns>
        public static VentilationOpening FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<VentilationOpening>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>VentilationOpening object</returns>
        public VentilationOpening DuplicateVentilationOpening()
        {
            return Duplicate() as VentilationOpening;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>HoneybeeObject</returns>
        public override HoneybeeObject Duplicate()
        {
            return FromJson(this.ToJson());
        }
     

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VentilationOpening);
        }

        /// <summary>
        /// Returns true if VentilationOpening instances are equal
        /// </summary>
        /// <param name="input">Instance of VentilationOpening to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VentilationOpening input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FractionAreaOperable == input.FractionAreaOperable ||
                    (this.FractionAreaOperable != null &&
                    this.FractionAreaOperable.Equals(input.FractionAreaOperable))
                ) && 
                (
                    this.FractionHeightOperable == input.FractionHeightOperable ||
                    (this.FractionHeightOperable != null &&
                    this.FractionHeightOperable.Equals(input.FractionHeightOperable))
                ) && 
                (
                    this.DischargeCoefficient == input.DischargeCoefficient ||
                    (this.DischargeCoefficient != null &&
                    this.DischargeCoefficient.Equals(input.DischargeCoefficient))
                ) && 
                (
                    this.WindCrossVent == input.WindCrossVent ||
                    (this.WindCrossVent != null &&
                    this.WindCrossVent.Equals(input.WindCrossVent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FractionAreaOperable != null)
                    hashCode = hashCode * 59 + this.FractionAreaOperable.GetHashCode();
                if (this.FractionHeightOperable != null)
                    hashCode = hashCode * 59 + this.FractionHeightOperable.GetHashCode();
                if (this.DischargeCoefficient != null)
                    hashCode = hashCode * 59 + this.DischargeCoefficient.GetHashCode();
                if (this.WindCrossVent != null)
                    hashCode = hashCode * 59 + this.WindCrossVent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) pattern
            Regex regexType = new Regex(@"^VentilationOpening$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // FractionAreaOperable (double) maximum
            if(this.FractionAreaOperable > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FractionAreaOperable, must be a value less than or equal to 1.", new [] { "FractionAreaOperable" });
            }

            // FractionAreaOperable (double) minimum
            if(this.FractionAreaOperable < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FractionAreaOperable, must be a value greater than or equal to 0.", new [] { "FractionAreaOperable" });
            }

            // FractionHeightOperable (double) maximum
            if(this.FractionHeightOperable > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FractionHeightOperable, must be a value less than or equal to 1.", new [] { "FractionHeightOperable" });
            }

            // FractionHeightOperable (double) minimum
            if(this.FractionHeightOperable < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FractionHeightOperable, must be a value greater than or equal to 0.", new [] { "FractionHeightOperable" });
            }

            // DischargeCoefficient (double) maximum
            if(this.DischargeCoefficient > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DischargeCoefficient, must be a value less than or equal to 1.", new [] { "DischargeCoefficient" });
            }

            // DischargeCoefficient (double) minimum
            if(this.DischargeCoefficient < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DischargeCoefficient, must be a value greater than or equal to 0.", new [] { "DischargeCoefficient" });
            }

            yield break;
        }
    }

}
